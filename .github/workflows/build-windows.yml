name: Build Windows EXE

on:
  push:
    branches:
      - v1.1.6-correct
      - feature/windows-support-win

jobs:
  build-win:
    runs-on: windows-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '22'

      - name: Install dependencies
        run: |
          corepack enable
          npm ci

      - name: Fetch ffmpeg/ffprobe (Windows x64)
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'
          $ffDir = "resources/ffmpeg/win32-x64"
          New-Item -ItemType Directory -Force -Path $ffDir | Out-Null
          # Download static ffmpeg and ffprobe builds
          $zipUrl = "https://www.gyan.dev/ffmpeg/builds/packages/ffmpeg-6.1.1-essentials_build.zip"
          $zipPath = "$env:RUNNER_TEMP/ffmpeg.zip"
          Invoke-WebRequest -Uri $zipUrl -OutFile $zipPath
          Expand-Archive -Path $zipPath -DestinationPath $env:RUNNER_TEMP/ffmpeg -Force
          $bin = Get-ChildItem -Recurse "$env:RUNNER_TEMP/ffmpeg" -Filter ffmpeg.exe | Select-Object -First 1
          $probe = Get-ChildItem -Recurse "$env:RUNNER_TEMP/ffmpeg" -Filter ffprobe.exe | Select-Object -First 1
          if (-not $bin -or -not $probe) { throw "ffmpeg/ffprobe not found in downloaded archive" }
          Copy-Item $bin.FullName "$ffDir/ffmpeg.exe" -Force
          Copy-Item $probe.FullName "$ffDir/ffprobe.exe" -Force

      - name: Build (pack)
        run: npm run build

      - name: Build Windows installer (NSIS)
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: npm run dist -- --win

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: windows-release
          path: release/*.exe

      - name: Create GitHub Release (or update)
        if: startsWith(github.ref, 'refs/heads/')
        uses: softprops/action-gh-release@v2
        with:
          tag_name: windows-${{ github.sha }}
          name: Windows build (${{ github.ref_name }})
          draft: false
          prerelease: true
          files: |
            release/*.exe
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

